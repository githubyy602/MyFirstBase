<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util
	   http://www.springframework.org/schema/util/spring-util-4.0.xsd "
       default-lazy-init="true">

    <!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，并且Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接（可根据项目的URL进行替换），非必须的属性，默认会找Web工程根目录下的[/login.jsp] -->
        <property name="loginUrl" value="/tourist/goLoginPage.do"/>
        <!-- 登录成功后要跳转的连接 -->
        <property name="successUrl" value="/tourist/index.do"/>
        <!--用户访问未授权的资源时，所显示的连接-->
        <property name="unauthorizedUrl" value="/tourist/index.do"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <util:map>
                <entry key="kickout" value-ref="kickoutSessionControllFilter"/>
            </util:map>
        </property>
        <!-- Shiro连接约束配置，即过滤链的定义-->
        <!--下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的
        anon：它对应的过滤器里面是空的，什么都没做，另外.do和.jsp后面的*表示参数，比方说[login.jsp?main]这种
        authc：该过滤器下的页面必须验证后才能访问，它是内置的org.apache.shiro.web.filter.authc.FormAuthenticationFilter
        注意：对于相似的资源，需要将anon的设置放在authc前面，anon才会生效，因为Shiro是从上往下匹配URL的，匹配成功便不再匹配了-->
        <property name="filterChainDefinitions">
            <value>
                <!--# some example chain definitions:-->
                /tourist/** = anon
                /batch/** = anon
                /user/** = kickout,authc
                <!--/docs/** = authc, perms[document:read]
                /** = authc-->
                <!--# more URL-to-FilterChain definitions here-->
            </value>
        </property>
    </bean>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <!--<bean id="someFilter" class="..."/>-->
    <!--<bean id="anotherFilter" class="..."> ... </bean>-->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 指定Shiro验证用户登录的类为自定义的Realm（若有多个Realm，可用[realms]属性代替） -->
        <property name="realm" ref="myRealm"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionManager" ref="shiroSessionManager"/>
        <!--
        Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者这里自定义的MyRealm
        而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
        -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <!--用户信息,角色权限控制的自定义类-->
    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="com.qs.filter.MyRealm" />

    <!--shiro会话管理-->
    <bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--是否删除无效的session-->
        <property name="deleteInvalidSessions" value="true" />
        <!--间隔半个小时检查一次session的有效性-->
        <property name="sessionValidationInterval" value="1800000" />
        <!--设置全局的session时效-->
        <property name="globalSessionTimeout" value="1800000" />
        <!--是否开启检测，默认开启-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!--会话验证线程-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
        <!--会话Cookie模板-->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!--会话dao-->
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

    <!--会话验证-->
    <!--Shiro提供了会话验证调度器，用于定期的验证会话是否已过期，如果过期将停止会话；
    出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；
    但是如在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，
    Shiro提供了会话验证调度器SessionValidationScheduler来做这件事情-->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="1800000"/>
        <property name="sessionManager" ref="shiroSessionManager"/>
    </bean>

    <!--保存sessionid的cookie-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie有效时间-->
        <property name="maxAge" value="-1"/>
        <property name="httpOnly" value="true"/>
        <!--此处默认为sid，且必须配置name值，否则报错（the cookie name is not empty/null）-->
        <property name="name" value="sid"/>
    </bean>

    <!--sessionDAO用来存储会话，不然就会瞬间即逝。通过缓存的方式存储。-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />



    <!-- 缓存管理器 -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="redisManager" class="com.qs.util.RedisManager">
        <property name="host" value="127.0.0.1"/>
        <property name="port" value="6379"/>
        <property name="password" value=""/>
        <property name="timeout" value="1000"/>
        <property name="expire" value="7200"/>
    </bean>


    <!--shiro生命周期-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--用户并发登录（登录人数控制）过滤器-->
    <bean id="kickoutSessionControllFilter" class="com.qs.filter.KickoutSessionFilter">
        <property name="sessionManager" ref="shiroSessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager" />
        <property name="url" value="/tourist/goLoginPage.do" />
        <property name="kickoutBefore" value="true"/>
        <property name="maxSessionCount" value="1"/>
    </bean>

    <!--启用shiro注解-->
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>